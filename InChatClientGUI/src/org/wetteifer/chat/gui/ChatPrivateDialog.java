/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.wetteifer.chat.gui;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import org.wetteifer.chat.ChatClient;
import org.wetteifer.chat.ChatException;

/**
 *
 * @author wetteifer
 */
public class ChatPrivateDialog extends javax.swing.JDialog {
    
    private static final long serialVersionUID = -2339636727667566919L;
    
    private static final String WINDOW_TITLE = "Conversaci√≥n privada";
    
    private ChatClient client;
    private String username;

    /**
     * Creates new form ChatPrivateDialog.
     */
    public ChatPrivateDialog(ChatClient client, String username) {
        initComponents();
        initDialog(client, username);
        setLocationRelativeTo(null);
    }
    
    /**
     * Inicializa el cuadro de dialogo.
     * @param client El cliente del servidor de chat.
     * @param username El nombre del usuario al que le estamos mandando mensajes.
     */
    private void initDialog(ChatClient client, String username) {
        // Guardamos las propiedades.
        this.client = client;
        this.username = username;
        
        // Cambiamos el titulo a la ventana para poner el nombre
        // del usuario.
        setTitle(WINDOW_TITLE + " con " + username);
    }
    
    /**
     * Inserta un mensaje en el area de mensajes.
     * @param message El mensaje a insertar.
     */
    public void append(String message) {
        txtMessages.append(message);
        txtMessages.append("\n");
    }
    
    /**
     * Evento que se activa al presionar el boton Enviar, que se encarga de enviar el mensaje. 
     * Primero verifica que el texto no sea nulo o este vacio y posterior mente envia el mensaje.
     * en caso de que ocurra un error se despliega un aviso con el error correspondiente.
     */
    private void sendPrivateMessage() {
        if (!client.isClosed()) {
            String message = txtSend.getText();

            // Verificar que sea valido el mensaje.
            if (message == null) return;        
            message = message.trim();        
            if (message.isEmpty()) return;

            // Enviar el mensaje.
            try {
                client.sendPrivateMessage(username, message);
            } catch (ChatException e) {
                showErrorDialog(e);
                return;
            }

            // Borramos el mensaje de la entrada.
            txtSend.setText("");
            txtSend.requestFocus();
        }
    }
    
    /**
     * Muestra un mensaje de error.
     * @param message El mensaje de error.
     */
    private void showErrorDialog(String message) {
        JOptionPane.showMessageDialog(this, message, WINDOW_TITLE, JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Muestra un mensaje de error.
     * @param e La excepcion ocurrida.
     */
    private void showErrorDialog(Exception e) {
        showErrorDialog(e.getMessage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtSend = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtMessages = new javax.swing.JTextArea();

        setTitle(WINDOW_TITLE);

        ((javax.swing.text.DefaultCaret) txtSend.getCaret()).setUpdatePolicy(javax.swing.text.DefaultCaret.ALWAYS_UPDATE);
        txtSend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSendKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtSend);

        ((javax.swing.text.DefaultCaret) txtMessages.getCaret()).setUpdatePolicy(javax.swing.text.DefaultCaret.ALWAYS_UPDATE);
        txtMessages.setEditable(false);
        jScrollPane4.setViewportView(txtMessages);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSendKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSendKeyPressed
        boolean enterPressed = (KeyEvent.VK_ENTER == evt.getKeyCode());

        if (evt.isShiftDown() && enterPressed) {
            txtSend.append("\n");
            return;
        }

        if (enterPressed) {
            sendPrivateMessage();
            evt.consume();
        }
    }//GEN-LAST:event_txtSendKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea txtMessages;
    private javax.swing.JTextArea txtSend;
    // End of variables declaration//GEN-END:variables

}
