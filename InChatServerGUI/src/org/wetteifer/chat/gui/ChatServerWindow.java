/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.wetteifer.chat.gui;

import java.awt.EventQueue;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.wetteifer.chat.ChatException;
import org.wetteifer.chat.ChatServer;
import org.wetteifer.chat.ChatServerListener;

/**
 *
 * @author wetteifer
 */
public class ChatServerWindow extends javax.swing.JFrame implements ChatServerListener {
    
    private static final long serialVersionUID = -718885496896811717L;
    
    private ChatServer server;

    /**
     * Creates new form ChatServerWindow.
     */
    public ChatServerWindow() {
        initComponents();
        setLocationRelativeTo(null);
    }
    
    /**
     * Agrega texto al area de mensajes.
     * @param message El mensaje a agregar.
     */
    private void append(String message) {
        txtMessages.append(message);
        txtMessages.append("\n");
    }
    
    /**
     * Establece los controles al estado especificado.
     * @param state true si deben ser habilitados, false en caso contrario.
     */
    private void enableControls(boolean state) {
         txtSend.setEnabled(state);
        btnClose.setEnabled(state);
    }
    
    /**
     * Envia un mensaje a los usuarios.
     */
    private void sendMessage() {
        if (!server.isClosed()) {
            String message = txtSend.getText();

            // Verificar que sea valido el mensaje.
            if (message == null) return;        
            message = message.trim();        
            if (message.isEmpty()) return;

            // Enviar el mensaje.
            server.chat(message);

            // Borramos el mensaje de la entrada.
            txtSend.setText("");
            txtSend.requestFocus();
        }
    }
    
    /**
     * Inicia el servidor.
     */
    private void startServer() {
        try {
            server = new ChatServer();
            server.setChatServerListener(this);
            server.start();
            
            btnStart.setEnabled(false);
            
            enableControls(true);
        } catch (ChatException e) {
            append(e.getMessage());
        }
    }
    
    /**
     * Cierra el servidor.
     * @return true si se ha cerrado el servidor, false en caso contrario.
     */
    private boolean closeServer() {            
        // Evitar mostrar el dialogo si el servidor ya esta cerrado.
        if (server == null || server.isClosed()) return true;
        
        int option = JOptionPane.showConfirmDialog(
                this,
                "Â¿Realmente desea cerrar el servidor?",
                "Consola",
                JOptionPane.OK_CANCEL_OPTION);
        
        if (JOptionPane.OK_OPTION == option) {
            try {
                server.close();
                enableControls(false);
                return true;
            } catch (ChatException e) {
                append(e.getMessage());
            }
        }
        
        // Se eligio la opcion cancelar.
        return false;
    }
    
    /**
     * Se encarga de agregar al area de mensajes los nuevos mensajes recibidos.
     * @param message El mensaje recibido.
     */
    @Override
    public void onMessageSent(String message) {
        append(message);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMessages = new javax.swing.JTextArea();
        btnClose = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtSend = new javax.swing.JTextArea();
        btnStart = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Consola del Servidor InChat");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtMessages.setEditable(false);
        ((javax.swing.text.DefaultCaret) txtMessages.getCaret()).setUpdatePolicy(javax.swing.text.DefaultCaret.ALWAYS_UPDATE);
        jScrollPane2.setViewportView(txtMessages);

        btnClose.setText("Cerrar");
        btnClose.setEnabled(false);
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        txtSend.setColumns(20);
        txtSend.setLineWrap(true);
        txtSend.setEnabled(false);
        txtSend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSendKeyPressed(evt);
            }
        });
        ((javax.swing.text.DefaultCaret) txtSend.getCaret()).setUpdatePolicy(javax.swing.text.DefaultCaret.ALWAYS_UPDATE);
        jScrollPane3.setViewportView(txtSend);

        btnStart.setText("Iniciar servidor");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        startServer();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        closeServer();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (closeServer()) {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void txtSendKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSendKeyPressed
        boolean enterPressed = (KeyEvent.VK_ENTER == evt.getKeyCode());
        
        if (evt.isShiftDown() && enterPressed) {
            txtSend.append("\n");
            return;
        }
        
        if (enterPressed) {
            sendMessage();
            evt.consume();
        }
    }//GEN-LAST:event_txtSendKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {}
        
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ChatServerWindow().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnStart;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtMessages;
    private javax.swing.JTextArea txtSend;
    // End of variables declaration//GEN-END:variables

}
